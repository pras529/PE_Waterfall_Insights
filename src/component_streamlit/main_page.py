import streamlit as st
import pandas as pd

# Attempt to import core logic
try:
    from src.core.waterfall_logic import calculate_european_waterfall, calculate_american_waterfall
    # financial_utils are used within waterfall_logic, so direct import here might not be needed
except ImportError:
    st.error(
        "CRITICAL ERROR: Could not import core logic modules. Ensure project structure and PYTHONPATH are correct.")


    # Define dummy functions if import fails, so the Streamlit page can still render
    def calculate_european_waterfall(*args, **kwargs):
        return {"error": "Core logic not loaded", "summary_metrics": {}, "distribution_tiers": {}}


    def calculate_american_waterfall(*args, **kwargs):
        return {"error": "Core logic not loaded"}


def display_main_page():
    st.header("Waterfall Model Configuration")

    col1, col2 = st.columns(2)

    with col1:
        st.subheader("Fund Parameters")
        fund_model_type = st.selectbox(
            "Waterfall Model Type",
            ["European (Whole Fund)", "American (Deal-by-Deal)"],  # American is still placeholder
            key="main_model_type"
        )
        # Using LP commitment for pref base, GP commitment for their capital tracking
        lp_commitment_total = st.number_input("Total LP Commitment (USD M)", min_value=0.0, value=100.0, step=10.0,
                                              key="main_lp_total_commit",
                                              help="Used as basis for simplified total preferred return hurdle.")
        gp_commitment_total = st.number_input("Total GP Commitment (USD M)", min_value=0.0, value=10.0, step=1.0,
                                              key="main_gp_total_commit")

    with col2:
        st.subheader("Distribution Terms (European Model)")
        preferred_return_pct = st.number_input("Total Preferred Return Hurdle (% of LP Commitment)", min_value=0.0,
                                               value=8.0, step=0.5, key="main_pref_return",
                                               help="Simplified: total % hurdle on LP commitment before GP catch-up.") / 100
        gp_catch_up_pct = st.number_input("GP Catch-Up Rate (%)", min_value=0.0, max_value=100.0, value=100.0, step=5.0,
                                          key="main_catch_up",
                                          help="Rate at which GP takes profit during catch-up phase (e.g., 100%).") / 100
        carried_interest_gp_share_pct = st.number_input("Carried Interest - GP Share in Final Split (%)", min_value=0.0,
                                                        max_value=100.0, value=20.0, step=1.0,
                                                        key="main_gp_carry") / 100

    st.markdown("""
    **Cash Flow CSV Format Expected:**
    Please upload a CSV file with the following columns:
    - `Period` (integer, e.g., 0, 1, 2, ...)
    - `LP_Contribution` (positive number for capital called from LPs)
    - `GP_Contribution` (positive number for capital called from GPs)
    - `Gross_Fund_Proceeds` (positive number for cash generated by the fund available for distribution)
    """)
    uploaded_file = st.file_uploader("Upload Cash Flow CSV", type=["csv"], key="main_cashflow_upload")

    if uploaded_file:
        try:
            cash_flows_df = pd.read_csv(uploaded_file)
            st.markdown("**Uploaded Cash Flows Preview:**")
            st.dataframe(cash_flows_df.head())

            # Validate required columns
            required_cols = ['Period', 'LP_Contribution', 'GP_Contribution', 'Gross_Fund_Proceeds']
            if not all(col in cash_flows_df.columns for col in required_cols):
                st.error(f"CSV file is missing one or more required columns: {', '.join(required_cols)}")
                return  # Stop further processing

            if st.button("Calculate Waterfall", key="main_calculate_button"):
                with st.spinner("Calculating..."):
                    results = None
                    if fund_model_type == "European (Whole Fund)":
                        results = calculate_european_waterfall(
                            lp_commitment_total=lp_commitment_total,  # Pass the total commitment
                            gp_commitment_total=gp_commitment_total,  # Pass the total commitment
                            preferred_return_pct=preferred_return_pct,
                            gp_catch_up_pct=gp_catch_up_pct,
                            carried_interest_gp_share_pct=carried_interest_gp_share_pct,
                            cash_flows_df=cash_flows_df
                        )
                    elif fund_model_type == "American (Deal-by-Deal)":
                        results = calculate_american_waterfall()  # Placeholder

                    if results:
                        if "error" in results:
                            st.error(results["error"])
                        else:
                            st.success("Calculation Complete!")
                            st.subheader("Results Summary")

                            summary = results.get("summary_metrics", {})
                            tiers = results.get("distribution_tiers", {})
                            notes = results.get("notes", {})

                            st.subheader("Key Performance Indicators")
                            col_met1, col_met2, col_met3, col_met4 = st.columns(4)
                            with col_met1:
                                st.metric("LP MOIC", f"{summary.get('LP MOIC', 0):.2f}x")
                                st.metric("GP MOIC", f"{summary.get('GP MOIC', 0):.2f}x")
                            with col_met2:
                                st.metric("LP IRR", f"{summary.get('LP IRR', 0) * 100:.2f}%" if summary.get(
                                    'LP IRR') is not None else "N/A")
                                st.metric("GP IRR", f"{summary.get('GP IRR', 0) * 100:.2f}%" if summary.get(
                                    'GP IRR') is not None else "N/A")
                            with col_met3:
                                st.metric("LP Total Received",
                                          f"${summary.get('LP Total Distributions Received', 0):,.0f}")
                                st.metric("GP Total Received",
                                          f"${summary.get('GP Total Distributions Received', 0):,.0f}")
                            with col_met4:
                                st.metric("LP Capital Called", f"${summary.get('LP Total Capital Called', 0):,.0f}")
                                st.metric("GP Capital Called", f"${summary.get('GP Total Capital Called', 0):,.0f}")

                            st.subheader("Distribution by Tiers")
                            # Create a DataFrame for tier results for better display
                            tier_data = {
                                "Tier": list(tiers.keys()),
                                "Amount (USD M)": [f"{v:,.2f}" for v in tiers.values()]
                            }
                            st.table(pd.DataFrame(tier_data))

                            if notes:
                                st.subheader("Calculation Notes")
                                for note_key, note_val in notes.items():
                                    st.markdown(f"- **{note_key}:** {note_val:,.2f}" if isinstance(note_val, (
                                    int, float)) else f"- **{note_key}:** {note_val}")

                            # st.subheader("Full Results (JSON)") # Optional: for detailed view
                            # st.json(results)
                            st.balloons()
        except Exception as e:
            st.error(f"An error occurred during processing or calculation: {e}")
            st.exception(e)  # Shows the full traceback for debugging
    else:
        st.info("Upload a CSV file with cash flow data (see expected format above) to perform calculations.")


if __name__ == '__main__':
    st.set_page_config(page_title="Main Waterfall Page Test", layout="wide")
    st.sidebar.info("Running main_page.py directly for testing.")
    display_main_page()